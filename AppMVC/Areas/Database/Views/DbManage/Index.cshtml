@using Microsoft.EntityFrameworkCore
@using System.Data
@inject AppDbContext dbContext
@{
    ViewData["Title"] = "Database Info";

    var connect = dbContext.Database.GetDbConnection();

    var dbname = connect.Database;
    var can_connect = dbContext.Database.CanConnect();
}
<partial name="_StatusMessage"></partial>
<h2>Database Info</h2>
<p>- Database: @dbname</p>
<p>- Source: @connect.DataSource</p>
<p>- State: @connect.State</p>
<hr />
<h2>Migrations</h2>
@foreach(var migration in dbContext.Database.GetAppliedMigrations())
{
    <p>@migration (Applied)</p>
}
@foreach (var migration in dbContext.Database.GetPendingMigrations())
{
    <p>@migration (Pending)</p>
}
@if(!can_connect)
{
    <p class="alert alert-danger">don't connection</p>
}
@if(dbContext.Database.GetPendingMigrations().Any())
{
    <form>
        <button class="btn btn-success" asp-controller="DbManage" asp-action="Migrate">Create database or Update Migrations</button>

    </form>
}

@if (can_connect)
{
    <h2>Tables:</h2>
    await dbContext.Database.OpenConnectionAsync();
    var table = dbContext.Database.GetDbConnection().GetSchema("Tables");
    <ul>
        @foreach(System.Data.DataRow row in table.Rows)
        {
            <li>@row["TABLE_NAME"]</li>
        }

    </ul>

    <a class="btn btn-danger" asp-action="DeleteDB">Delete database: @dbname</a>
    <a class="btn btn-primary" asp-action="SeedData">Seed database: @dbname</a>

}